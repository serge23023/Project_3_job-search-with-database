import psycopg2
from src.config import load_config


def create_database() -> None:
    """–°–æ–∑–¥–∞—ë—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö hh_db, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    config = load_config()
    conn = psycopg2.connect(
        dbname="postgres",
        user=config["user"],
        password=config["password"],
        host=config["host"],
        port=config["port"],
    )
    conn.autocommit = True
    cur = conn.cursor()

    cur.execute("SELECT 1 FROM pg_database WHERE datname = 'hh_db'")
    exists = cur.fetchone()

    if not exists:
        cur.execute("CREATE DATABASE hh_db")
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö hh_db —Å–æ–∑–¥–∞–Ω–∞")
    else:
        print("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö hh_db —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ")

    cur.close()
    conn.close()


def create_tables() -> None:
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã employers, vacancies –∏ currency_rates (–∏–ª–∏ –æ—á–∏—â–∞–µ—Ç, –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç)."""
    config = load_config()
    conn = psycopg2.connect(
        dbname="hh_db",
        user=config["user"],
        password=config["password"],
        host=config["host"],
        port=config["port"],
    )
    cur = conn.cursor()

    # –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ CREATE TABLE
    employers_def = """
        CREATE TABLE employers (
            employer_id VARCHAR(50) PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            url TEXT NOT NULL,
            open_vacancies INT
        )
    """
    vacancies_def = """
        CREATE TABLE vacancies (
            vacancy_id VARCHAR(50) PRIMARY KEY,
            employer_id VARCHAR(50) REFERENCES employers(employer_id) ON DELETE CASCADE,
            name VARCHAR(255) NOT NULL,
            salary_from BIGINT,
            salary_to BIGINT,
            salary_currency VARCHAR(3),
            salary_rub NUMERIC(14,2),
            url TEXT NOT NULL
        )
    """
    currency_rates_def = """
        CREATE TABLE currency_rates (
            code VARCHAR(3) PRIMARY KEY,
            rate NUMERIC(14,6) NOT NULL
        )
    """

    def table_exists(table_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –≤ —Å—Ö–µ–º–µ public."""
        cur.execute(
            """
            SELECT EXISTS (
                SELECT FROM information_schema.tables
                WHERE table_schema = 'public' AND table_name = %s
            )
            """,
            (table_name,),
        )
        return cur.fetchone()[0]

    def table_structure_matches(
        table_name: str, expected_columns: list[tuple[str, str]]
    ) -> bool:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∫–æ–ª–æ–Ω–æ–∫."""
        cur.execute(
            """
            SELECT column_name, data_type
            FROM information_schema.columns
            WHERE table_schema = 'public' AND table_name = %s
            ORDER BY ordinal_position
            """,
            (table_name,),
        )
        actual = [(row[0], row[1]) for row in cur.fetchall()]
        return actual == expected_columns

    # employers
    if table_exists("employers"):
        if table_structure_matches(
            "employers",
            [
                ("employer_id", "character varying"),
                ("name", "character varying"),
                ("url", "text"),
                ("open_vacancies", "integer"),
            ],
        ):
            cur.execute("TRUNCATE TABLE employers RESTART IDENTITY CASCADE")
            print("üîÑ –¢–∞–±–ª–∏—Ü–∞ employers –æ—á–∏—â–µ–Ω–∞ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–≤–ø–∞–ª–∞)")
        else:
            cur.execute("DROP TABLE employers CASCADE")
            cur.execute(employers_def)
            print("‚ôªÔ∏è –¢–∞–±–ª–∏—Ü–∞ employers –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å)")
    else:
        cur.execute(employers_def)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ employers —Å–æ–∑–¥–∞–Ω–∞")

    # vacancies
    if table_exists("vacancies"):
        if table_structure_matches(
            "vacancies",
            [
                ("vacancy_id", "character varying"),
                ("employer_id", "character varying"),
                ("name", "character varying"),
                ("salary_from", "bigint"),
                ("salary_to", "bigint"),
                ("salary_currency", "character varying"),
                ("salary_rub", "numeric"),
                ("url", "text"),
            ],
        ):
            cur.execute("TRUNCATE TABLE vacancies RESTART IDENTITY CASCADE")
            print("üîÑ –¢–∞–±–ª–∏—Ü–∞ vacancies –æ—á–∏—â–µ–Ω–∞ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–≤–ø–∞–ª–∞)")
        else:
            cur.execute("DROP TABLE vacancies CASCADE")
            cur.execute(vacancies_def)
            print("‚ôªÔ∏è –¢–∞–±–ª–∏—Ü–∞ vacancies –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å)")
    else:
        cur.execute(vacancies_def)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ vacancies —Å–æ–∑–¥–∞–Ω–∞")

    # currency_rates
    if table_exists("currency_rates"):
        if table_structure_matches(
            "currency_rates",
            [
                ("code", "character varying"),
                ("rate", "numeric"),
            ],
        ):
            cur.execute("TRUNCATE TABLE currency_rates RESTART IDENTITY CASCADE")
            print("üîÑ –¢–∞–±–ª–∏—Ü–∞ currency_rates –æ—á–∏—â–µ–Ω–∞ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–≤–ø–∞–ª–∞)")
        else:
            cur.execute("DROP TABLE currency_rates CASCADE")
            cur.execute(currency_rates_def)
            print("‚ôªÔ∏è –¢–∞–±–ª–∏—Ü–∞ currency_rates –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å)")
    else:
        cur.execute(currency_rates_def)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ currency_rates —Å–æ–∑–¥–∞–Ω–∞")

    conn.commit()
    cur.close()
    conn.close()
