from tabulate import tabulate
from typing import Any


def _print_paginated(
    rows: list[tuple[Any, ...]], headers: list[str], title: str, limit: int = 10
) -> None:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –≤—ã–≤–æ–¥ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ Enter/q."""
    print(f"\n{title}")
    if not rows:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    total = len(rows)
    index = 0

    while index < total:
        chunk = rows[index : index + limit]
        print(
            tabulate(
                chunk,
                headers=headers,
                tablefmt="fancy_grid",
                showindex=range(index + 1, index + len(chunk) + 1),
            )
        )

        index += limit
        print(f"–ü–æ–∫–∞–∑–∞–Ω–æ {min(index, total)} –∏–∑ {total} —Å—Ç—Ä–æ–∫.")

        if index >= total:
            break

        # –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        while True:
            choice = input("[Enter] –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å | [q] –≤—ã—Ö–æ–¥: ").strip().lower()
            if choice == "q":
                print("üëã –í—ã—Ö–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞")
                return
            elif choice == "":  # –ø—Ä–æ—Å—Ç–æ Enter
                break
            else:
                print("‚ùì –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞")


def print_companies(
    companies: list[tuple[str, int, float | None]], limit: int = 10
) -> None:
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π."""
    headers = ["–ö–æ–º–ø–∞–Ω–∏—è", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π", "–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –≤ RUB"]
    _print_paginated(companies, headers, "üìä –ö–æ–º–ø–∞–Ω–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π:", limit)


def print_vacancies(
    vacancies: list[
        tuple[str, str, float | None, float | None, str | None, float | None, str]
    ],
    limit: int = 10,
) -> None:
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –∏ —Å—Å—ã–ª–∫–æ–π."""
    headers = [
        "–ö–æ–º–ø–∞–Ω–∏—è",
        "–í–∞–∫–∞–Ω—Å–∏—è",
        "–û—Ç",
        "–î–æ",
        "–í–∞–ª—é—Ç–∞",
        "–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –≤ RUB",
        "–°—Å—ã–ª–∫–∞",
    ]
    _print_paginated(vacancies, headers, "üíº –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏:", limit)


def print_avg_salary(avg: float | None) -> None:
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ä–µ–¥–Ω—é—é –∑–∞—Ä–ø–ª–∞—Ç—É –ø–æ –≤—Å–µ–º –≤–∞–∫–∞–Ω—Å–∏—è–º."""
    print("\nüí∞ –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞:")
    if avg:
        print(f"{avg:,.0f} —Ä—É–±.".replace(",", " "))
    else:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞.")


def print_higher_salary_vacancies(
    vacancies: list[
        tuple[str, str, float | None, float | None, str | None, float | None, str]
    ],
    limit: int = 10,
) -> None:
    """–í—ã–≤–æ–¥–∏—Ç –≤–∞–∫–∞–Ω—Å–∏–∏, –≥–¥–µ –∑–∞—Ä–ø–ª–∞—Ç–∞ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π."""
    headers = [
        "–í–∞–∫–∞–Ω—Å–∏—è",
        "–ö–æ–º–ø–∞–Ω–∏—è",
        "–û—Ç",
        "–î–æ",
        "–í–∞–ª—é—Ç–∞",
        "–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –≤ RUB",
        "–°—Å—ã–ª–∫–∞",
    ]
    _print_paginated(vacancies, headers, "‚¨ÜÔ∏è –í–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π:", limit)


def print_keyword_vacancies(
    vacancies: list[
        tuple[str, str, float | None, float | None, str | None, float | None, str]
    ],
    keyword: str,
    limit: int = 10,
) -> None:
    """–í—ã–≤–æ–¥–∏—Ç –≤–∞–∫–∞–Ω—Å–∏–∏, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É."""
    headers = [
        "–í–∞–∫–∞–Ω—Å–∏—è",
        "–ö–æ–º–ø–∞–Ω–∏—è",
        "–û—Ç",
        "–î–æ",
        "–í–∞–ª—é—Ç–∞",
        "–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –≤ RUB",
        "–°—Å—ã–ª–∫–∞",
    ]
    title = f"üîé –í–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword}':"
    _print_paginated(vacancies, headers, title, limit)
